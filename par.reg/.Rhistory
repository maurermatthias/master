load.data()
gev
pr(gev)
load.data()
gev
help(pr)
library(par.reg)
data=load.data()
data
help(pr)
gev=list();
gev[["distr"]]="gev"
data=load.data()
gev[["xval"]]=data[,1]
gev[["yval"]]=data[,2]
#print individual parameter estimations - decide on the parameter functions
gev[["type"]]="diag"
gev.result=pr(gev)
#defining additional input-list fields for fitting
gev[["type"]]="fit"
gev[["error.type"]]="rel"
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:9/10
#validity function
val.gev<-function(stress,parameter){
k=parameter[1];
a=parameter[2];
b=parameter[3];
c1=parameter[4];
c2=parameter[5];
if(b<=max(stress) || a>=min(stress) || c1<=0 || c2<=0 || k==0 || min(gev2(stress,parameter))<=0 ){
return(FALSE);
}else{
return(TRUE);
}
}
#xi gev-distibution
gev1<-function(stress,parameter){
k=parameter[1];
return(k);
}
#sigma^2 gev-distribution
gev2<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c1=parameter[4];
return(((b-a)/(stress-a)-1)*c1)
}
#mu gev-distribution
gev3<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c2=parameter[5];
return(((b-a)/(stress-a)-1)*c2)
}
library('evir')
pr(gev)
help(require)
require('stats')
require('evir')
library(par.reg)
load.data()
gev
pr(gev)
load.data()
load.data()
library(par.reg)
load.data()
gev
help(pr)
gev=list();
gev[["distr"]]="gev"
data=load.data()
gev[["xval"]]=data[,1]
gev[["yval"]]=data[,2]
#print individual parameter estimations - decide on the parameter functions
gev[["type"]]="diag"
gev.result=pr(gev)
#defining additional input-list fields for fitting
gev[["type"]]="fit"
gev[["error.type"]]="rel"
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:9/10
#validity function
val.gev<-function(stress,parameter){
k=parameter[1];
a=parameter[2];
b=parameter[3];
c1=parameter[4];
c2=parameter[5];
if(b<=max(stress) || a>=min(stress) || c1<=0 || c2<=0 || k==0 || min(gev2(stress,parameter))<=0 ){
return(FALSE);
}else{
return(TRUE);
}
}
#xi gev-distibution
gev1<-function(stress,parameter){
k=parameter[1];
return(k);
}
#sigma^2 gev-distribution
gev2<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c1=parameter[4];
return(((b-a)/(stress-a)-1)*c1)
}
#mu gev-distribution
gev3<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c2=parameter[5];
return(((b-a)/(stress-a)-1)*c2)
}
#perform fit
gev.result=pr(gev)
load.data()
load.data()
library(par.reg)
load.data()
gev
pr(gev)
require('evir')
pr(gev)
library('evir')
load.data()
library(par.reg)
load.data()
gev
help(pr)
gev=list();
gev[["distr"]]="gev"
data=load.data()
gev[["xval"]]=data[,1]
gev[["yval"]]=data[,2]
#print individual parameter estimations - decide on the parameter functions
gev[["type"]]="diag"
gev.result=pr(gev)
library("evir")
library(par.reg)
pr()
pr()
library(par.reg)
pr()
help(pr)
gev=list();
gev[["distr"]]="gev"
data=load.data()
gev[["xval"]]=data[,1]
gev[["yval"]]=data[,2]
#print individual parameter estimations - decide on the parameter functions
gev[["type"]]="diag"
gev.result=pr(gev)
gev[["type"]]="fit"
gev[["error.type"]]="rel"
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:9/10
#validity function
val.gev<-function(stress,parameter){
k=parameter[1];
a=parameter[2];
b=parameter[3];
c1=parameter[4];
c2=parameter[5];
if(b<=max(stress) || a>=min(stress) || c1<=0 || c2<=0 || k==0 || min(gev2(stress,parameter))<=0 ){
return(FALSE);
}else{
return(TRUE);
}
}
#define parameter-regression function, dependendt on structure parameter
#xi gev-distibution
gev1<-function(stress,parameter){
k=parameter[1];
return(k);
}
#sigma^2 gev-distribution
gev2<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c1=parameter[4];
return(((b-a)/(stress-a)-1)*c1)
}
#mu gev-distribution
gev3<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c2=parameter[5];
return(((b-a)/(stress-a)-1)*c2)
}
gev.result=pr(gev)
gev.result=pr(gev)
library(par.reg)
gev=list();
gev[["distr"]]="gev"
data=load.data()
gev[["xval"]]=data[,1]
gev[["yval"]]=data[,2]
#print individual parameter estimations - decide on the parameter functions
gev[["type"]]="diag"
gev.result=pr(gev)
#defining additional input-list fields for fitting
gev[["type"]]="fit"
gev[["error.type"]]="rel"
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:9/10
#validity function
val.gev<-function(stress,parameter){
k=parameter[1];
a=parameter[2];
b=parameter[3];
c1=parameter[4];
c2=parameter[5];
if(b<=max(stress) || a>=min(stress) || c1<=0 || c2<=0 || k==0 || min(gev2(stress,parameter))<=0 ){
return(FALSE);
}else{
return(TRUE);
}
}
#define parameter-regression function, dependendt on structure parameter
#xi gev-distibution
gev1<-function(stress,parameter){
k=parameter[1];
return(k);
}
#sigma^2 gev-distribution
gev2<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c1=parameter[4];
return(((b-a)/(stress-a)-1)*c1)
}
#mu gev-distribution
gev3<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c2=parameter[5];
return(((b-a)/(stress-a)-1)*c2)
}
#perform fit
gev.result=pr(gev)
library(par.reg)
gev=list();
gev[["distr"]]="gev"
data=load.data()
gev[["xval"]]=data[,1]
gev[["yval"]]=data[,2]
#print individual parameter estimations - decide on the parameter functions
gev[["type"]]="diag"
gev.result=pr(gev)
#defining additional input-list fields for fitting
gev[["type"]]="fit"
gev[["error.type"]]="rel"
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:9/10
#validity function
val.gev<-function(stress,parameter){
k=parameter[1];
a=parameter[2];
b=parameter[3];
c1=parameter[4];
c2=parameter[5];
if(b<=max(stress) || a>=min(stress) || c1<=0 || c2<=0 || k==0 || min(gev2(stress,parameter))<=0 ){
return(FALSE);
}else{
return(TRUE);
}
}
#define parameter-regression function, dependendt on structure parameter
#xi gev-distibution
gev1<-function(stress,parameter){
k=parameter[1];
return(k);
}
#sigma^2 gev-distribution
gev2<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c1=parameter[4];
return(((b-a)/(stress-a)-1)*c1)
}
#mu gev-distribution
gev3<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c2=parameter[5];
return(((b-a)/(stress-a)-1)*c2)
}
#perform fit
gev.result=pr(gev)
library('stats')
gev=list();
gev[["distr"]]="gev"
data=load.data()
gev[["xval"]]=data[,1]
gev[["yval"]]=data[,2]
#print individual parameter estimations - decide on the parameter functions
gev[["type"]]="diag"
gev.result=pr(gev)
#defining additional input-list fields for fitting
gev[["type"]]="fit"
gev[["error.type"]]="rel"
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:9/10
#validity function
val.gev<-function(stress,parameter){
k=parameter[1];
a=parameter[2];
b=parameter[3];
c1=parameter[4];
c2=parameter[5];
if(b<=max(stress) || a>=min(stress) || c1<=0 || c2<=0 || k==0 || min(gev2(stress,parameter))<=0 ){
return(FALSE);
}else{
return(TRUE);
}
}
#define parameter-regression function, dependendt on structure parameter
#xi gev-distibution
gev1<-function(stress,parameter){
k=parameter[1];
return(k);
}
#sigma^2 gev-distribution
gev2<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c1=parameter[4];
return(((b-a)/(stress-a)-1)*c1)
}
#mu gev-distribution
gev3<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c2=parameter[5];
return(((b-a)/(stress-a)-1)*c2)
}
#perform fit
gev.result=pr(gev)
install.packages(c("distillery", "evaluate", "extRemes", "FAdist", "formatR", "highr", "knitr", "lme4", "manipulate", "mime", "plyr", "psych", "quantreg", "R.matlab", "Rcpp", "RcppEigen", "rmarkdown", "scales", "sp", "SparseM", "stringi"))
