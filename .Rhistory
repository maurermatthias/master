stop("ratio too small or too large - need to be between 1 and 0 and be adjusted to the group size!");
tmp.vec=rep(TRUE,gr.len)
pos.to.change=sample(1:gr.len,gr.ratio)
for(i in 1:length(pos.to.change)){
tmp.vec[pos.to.change]=FALSE
}
bool.vec=c(bool.vec,tmp.vec)
}
stop.rep=TRUE
if(length(vectors)!=0){
for(i in 1:length(vectors)){
if(sum(bool.vec==vectors[[i]])==length(bool.vec)){
stop.rep=FALSE
}
}
}
if(stop.rep){
break
}
}
vectors[[col]]=bool.vec
}
#warning("no check for multiple appereance of the same vector");
mat=c()
for(i in 1:times){
mat=c(mat,vectors[[i]])
}
return(matrix(mat,nrow=no.lines,byrow=FALSE))
}
create.rand.boolmatrix(input2,0.5,2)
create.rand.boolmatrix(input2,0.5,3)
create.rand.boolmatrix(input2,0.5,4)
choose(20,4)
(choose(20,4))^10
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 50)
v=pr.sim(gev, 0.5, 5000000000)
v=pr.sim(gev, 0.5, 50000000)
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 5000000)
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 5000000)
v=pr.sim(gev, 0.5, 50000)
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 5000)
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 5000)
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 5000)
warnings()
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 5000)
length(v)
get.time(sec){
if(sec<60){
return(paste(as.character(sec),"[s]",sep=""))
}else{
n.sec=sec%/%60
n.min=(sec-n.sec)/60
return(paste(as.character(n.min),"[m] ",as.character(n.sec),"[s]",sep=""))
}
}
get.time<-function(sec){
if(sec<60){
return(paste(as.character(sec),"[s]",sep=""))
}else{
n.sec=sec%/%60
n.min=(sec-n.sec)/60
return(paste(as.character(n.min),"[m] ",as.character(n.sec),"[s]",sep=""))
}
}
get.time(30)
get.time(90)
20%/%5
20%/%4
20%/%56
20%/%3
get.time<-function(sec){
if(sec<60){
return(paste(as.character(sec),"[s]",sep=""))
}else{
n.min=sec%/%60
n.sec=sec-n.min*60
return(paste(as.character(n.min),"[m] ",as.character(n.sec),"[s]",sep=""))
}
}
get.time(90)
get.time(60)
get.time<-function(sec){
if(sec<60){
return(paste(as.character(sec),"[s]",sep=""))
}else{
n.min=sec%/%60
n.sec=as.character(sec-n.min*60)
if(length(n.sec)==1)
n.sec=paste("0",n.sec,sep="")
return(paste(as.character(n.min),"[m] ",n.sec,"[s]",sep=""))
}
}
get.time(90)
get.time(61)
get.time(60)
get.time(90)
length("3")
length("30")
w="as"
w.length
nchar("")
nchar("wer")
get.time<-function(sec){
if(sec<60){
return(paste(as.character(sec),"[s]",sep=""))
}else{
n.min=sec%/%60
n.sec=as.character(sec-n.min*60)
if(nchar(n.sec)==1)
n.sec=paste("0",n.sec,sep="")
return(paste(as.character(n.min),"[m] ",n.sec,"[s]",sep=""))
}
}
get.time(90)
get.time(60)
get.time(61)
get.time(200)
source('C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/ParameterRegression.R')
v=pr.sim(gev, 0.5, 5000)
v=pr.sim(gev, 0.5, 500)
source('C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/ParameterRegression.R')
v=pr.sim(gev, 0.5, 500)
source('C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/ParameterRegression.R')
v=pr.sim(gev, 0.5, 500)
warnings()
gev.result=pr(gev)
pr.parplot(gev.result)
gev[["type"]]="diag"
gev.result=pr(gev)
source('C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/ParameterRegression.R')
gev.result=pr(gev)
source('C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/ParameterRegression.R')
gev.result=pr(gev)
gev[["type"]]="fit"
gev.result=pr(gev)
gev.result
gev[["type"]]="diag"
gev.result=pr(gev)
gev.result
z=pr(gev)
z
i
i=pr(gev)
i
source('C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/ParameterRegression.R')
gev2=list();
gev2[["distr"]]="gev"
gev2[["xval"]]=shen1[,1]
gev2[["yval"]]=shen1[,2]
gev2[["type"]]="diag"
gev2.result=pr(gev2)
gev2
gev2.result
gev2[["type"]]="fit"
gev2.result=pr(gev2)
source('C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/ParameterRegression.R')
gev2[["distr"]]="norm"
gev2[["xval"]]=shen1[,1]
gev2[["yval"]]=shen1[,2]
gev2[["type"]]="diag"
gev2.result=pr(gev2)
gev[["type"]]="fit"
gev[["quantiles"]]=1:9/10
gev[["control"]]=list(maxit=1000)
v=pr.sim(gev, 0.5, 5000)
gev
v=pr.sim(gev, 0.5, 50)
v
v=pr.sim(gev, 0.5, 50)
gev=list();
gev[["distr"]]="gev"
gev[["error.type"]]="rel"
gev[["xval"]]=shen1[,1]
gev[["yval"]]=shen1[,2]
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:10/20
gev[["control"]]=list(maxit=1000)
v=pr.sim(gev, 0.5, 50)
gev
gev.result=pr(gev)
#xi gev
gev1<-function(stress,parameter){
k=parameter[1];
return(k);
}
#sigma^2 gev
gev2<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c1=parameter[4];
return(((b-a)/(stress-a)-1)*c1)
}
#mu gev
gev3<-function(stress,parameter){
a=parameter[2];
b=parameter[3];
c2=parameter[5];
return(((b-a)/(stress-a)-1)*c2)
}
gev.result=pr(gev)
v=pr.sim(gev, 0.5, 50)
val.gev<-function(stress,parameter){
k=parameter[1];
a=parameter[2];
b=parameter[3];
c1=parameter[4];
c2=parameter[5];
if(b<=max(stress) || a>=min(stress) || c1<=0 || c2<=0 || k==0 || min(gev2(stress,parameter))<=0 ){
return(FALSE);
}else{
return(TRUE);
}
}
v=pr.sim(gev, 0.5, 50)
warnings()
source('ParameterRegression.R')
gev=list();
gev[["distr"]]="gev"
gev[["error.type"]]="rel"
gev[["xval"]]=shen1[,1]
gev[["yval"]]=shen1[,2]
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:10/20
gev.result=pr(gev)
source('ParameterRegression.R')
gev=list();
gev[["distr"]]="gev"
gev[["error.type"]]="rel"
gev[["xval"]]=shen1[,1]
gev[["yval"]]=shen1[,2]
gev[["validity.fun"]]="val.gev"
gev[["struct.fun"]]=c("gev1","gev2","gev3")
gev[["struct.start.parameter"]]=c(-0.31,49.67,20809,18.8,69.41)
gev[["quantiles"]]=1:10/20
gev.result=pr(gev)
source('ParameterRegression.R')
gev.result=pr(gev)
source('ParameterRegression.R')
gev.result=pr(gev)
source('ParameterRegression.R')
gev.result=pr(gev)
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 50)
warnings()
source('ParameterRegression.R')
gev.result=pr(gev)
source('ParameterRegression.R')
gev.result=pr(gev)
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 50)
v=pr.sim(gev, 0.5, 50)
source('ParameterRegression.R')
v=pr.sim(gev, 0.5, 50)
gev.result=pr(gev)
source('ParameterRegression.R')
norm=list();
norm[["distr"]]="norm"
norm[["control"]]=list(maxit=20000);
norm[["xval"]]=shen1[,1]
norm[["yval"]]=shen1[,2]
#norm[["validity.fun"]]="val.norm"
norm[["struct.fun"]]=c("norm1","norm2")
norm[["struct.start.parameter"]]=c(0.9*min(shen1[,1]),1.1*max(shen1[,1]),1000,1000)
#validity function
val.norm<-function(stress,parameter){
a=parameter[1];
b=parameter[2];
c1=parameter[3];
c2=parameter[4];
sigma.min=min(norm2(stress,parameter))
if(b<=max(stress) || a>=min(stress) || c1<=0 || c2<=0 || sigma.min <= 0){
return(FALSE);
}else{
return(TRUE);
}
}
#mu normal
norm1<-function(stress,parameter){
a=parameter[1];
b=parameter[2];
c1=parameter[3];
return(((b-a)/(stress-a)-1)*c1)
}
#sigma^2 normal
norm2<-function(stress,parameter){
a=parameter[1];
b=parameter[2];
c2=parameter[4];
return(((b-a)/(stress-a)-1)*c2)
}
norm.result=pr(norm)
pr.parplot(norm.result)
gev.result=pr(gev)
source('ParameterRegression.R')
gev.result=pr(gev)
source('ParameterRegression.R')
gev.result=pr(gev)
source('ParameterRegression.R')
gev.result=pr(gev)
gev[["error.type"]]="abs"
gev.result=pr(gev)
gev[["error.type"]]="rel"
gev.result=pr(gev)
gev[["error.type"]]="relzu"
gev.result=pr(gev)
gev.result
gev[["error.type"]]="wei"
gev.result=pr(gev)
help(load)
help(load.data)
help(readRDS)
shen1
source('C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/ParameterRegression.R')
shen1
shen1=load.data()
shen1
shen1
shen1=readRDS("C:/Users/moja/Dropbox/12 sem/Masterarbeit/R/shen1.rds")
size(shen1)
length(shen1)
shen1
dim(shen1)
dim(shen1)[1]
cr<-function(x){
lines=dim(x)[1]
col=dim(x)[2]
txt=""
for(i in 1:lines){
for(j in 1:col){
txt=paste(txt,"\n",as.character(x[i,j]),sep="")
}
}
}
cr(shen1)
cr<-function(x){
lines=dim(x)[1]
col=dim(x)[2]
txt=""
for(i in 1:lines){
for(j in 1:col){
txt=paste(txt,"\n",as.character(x[i,j]),sep="")
}
}
return(txt)
}
a=cr(shen1)
a
cr<-function(x){
lines=dim(x)[1]
col=dim(x)[2]
txt=""
for(i in 1:lines){
for(j in 1:col){
txt=paste(txt,"data[i,j]=",as.character(x[i,j]),"; ",sep="")
}
}
return(txt)
}
cr(shen1)
cr<-function(x){
lines=dim(x)[1]
col=dim(x)[2]
txt=""
for(i in 1:lines){
for(j in 1:col){
txt=paste(txt,"data[",as.character(i),",",as.character(j),"]=",as.character(x[i,j]),"; ",sep="")
}
}
return(txt)
}
cr(shen1)
data=array()
data[1,3]=3
data=matrix()
data[1,3]=3
load.data<-function(){
data=matrix(rep(NA,600),nrow=200)
data[1,1]=294.3; data[1,2]=5300; data[1,3]=0; data[2,1]=294.3; data[2,2]=6200;
data[2,3]=0; data[3,1]=294.3; data[3,2]=6500; data[3,3]=0; data[4,1]=294.3;
data[4,2]=6600; data[4,3]=0; data[5,1]=294.3; data[5,2]=7000; data[5,3]=0;
data[6,1]=294.3; data[6,2]=7500; data[6,3]=0; data[7,1]=294.3; data[7,2]=8000;
data[7,3]=0; data[8,1]=294.3; data[8,2]=8400; data[8,3]=0; data[9,1]=294.3;
data[9,2]=8700; data[9,3]=0; data[10,1]=294.3; data[10,2]=8800; data[10,3]=0;
data[11,1]=294.3; data[11,2]=9000; data[11,3]=0; data[12,1]=294.3; data[12,2]=9200;
data[12,3]=0; data[13,1]=294.3; data[13,2]=9200; data[13,3]=0; data[14,1]=294.3;
data[14,2]=9400; data[14,3]=0; data[15,1]=294.3; data[15,2]=9500; data[15,3]=0;
data[16,1]=294.3; data[16,2]=9500; data[16,3]=0; data[17,1]=294.3; data[17,2]=9800;
data[17,3]=0; data[18,1]=294.3; data[18,2]=10000; data[18,3]=0; data[19,1]=294.3;
data[19,2]=10500; data[19,3]=0; data[20,1]=294.3; data[20,2]=11800; data[20,3]=0;
data[21,1]=220.7; data[21,2]=5100; data[21,3]=0; data[22,1]=220.7; data[22,2]=6100;
data[22,3]=0; data[23,1]=220.7; data[23,2]=7000; data[23,3]=0; data[24,1]=220.7;
data[24,2]=7700; data[24,3]=0; data[25,1]=220.7; data[25,2]=8600; data[25,3]=0;
data[26,1]=220.7; data[26,2]=9000; data[26,3]=0; data[27,1]=220.7; data[27,2]=9100;
data[27,3]=0; data[28,1]=220.7; data[28,2]=9300; data[28,3]=0; data[29,1]=220.7;
data[29,2]=9600; data[29,3]=0; data[30,1]=220.7; data[30,2]=9700; data[30,3]=0;
data[31,1]=220.7; data[31,2]=9700; data[31,3]=0; data[32,1]=220.7; data[32,2]=10100;
data[32,3]=0; data[33,1]=220.7; data[33,2]=10300; data[33,3]=0; data[34,1]=220.7;
data[34,2]=11200; data[34,3]=0; data[35,1]=220.7; data[35,2]=11500; data[35,3]=0;
data[36,1]=220.7; data[36,2]=11600; data[36,3]=0; data[37,1]=220.7; data[37,2]=12300;
data[37,3]=0; data[38,1]=220.7; data[38,2]=12500; data[38,3]=0; data[39,1]=220.7;
data[39,2]=13400; data[39,3]=0; data[40,1]=220.7; data[40,2]=15900; data[40,3]=0;
data[41,1]=176.6; data[41,2]=6200; data[41,3]=0; data[42,1]=176.6; data[42,2]=9400;
data[42,3]=0; data[43,1]=176.6; data[43,2]=10000; data[43,3]=0; data[44,1]=176.6;
data[44,2]=10000; data[44,3]=0; data[45,1]=176.6; data[45,2]=10200; data[45,3]=0;
data[46,1]=176.6; data[46,2]=10800; data[46,3]=0; data[47,1]=176.6; data[47,2]=11300;
data[47,3]=0; data[48,1]=176.6; data[48,2]=12600; data[48,3]=0; data[49,1]=176.6;
data[49,2]=12800; data[49,3]=0; data[50,1]=176.6; data[50,2]=13900; data[50,3]=0;
data[51,1]=176.6; data[51,2]=14000; data[51,3]=0; data[52,1]=176.6; data[52,2]=14200;
data[52,3]=0; data[53,1]=176.6; data[53,2]=14300; data[53,3]=0; data[54,1]=176.6;
data[54,2]=14700; data[54,3]=0; data[55,1]=176.6; data[55,2]=15100; data[55,3]=0;
data[56,1]=176.6; data[56,2]=15200; data[56,3]=0; data[57,1]=176.6; data[57,2]=16600;
data[57,3]=0; data[58,1]=176.6; data[58,2]=16900; data[58,3]=0; data[59,1]=176.6;
data[59,2]=17000; data[59,3]=0; data[60,1]=176.6; data[60,2]=18200; data[60,3]=0;
data[61,1]=134.9; data[61,2]=9100; data[61,3]=0; data[62,1]=134.9; data[62,2]=9300;
data[62,3]=0; data[63,1]=134.9; data[63,2]=9400; data[63,3]=0; data[64,1]=134.9;
data[64,2]=9700; data[64,3]=0; data[65,1]=134.9; data[65,2]=14500; data[65,3]=0;
data[66,1]=134.9; data[66,2]=15900; data[66,3]=0; data[67,1]=134.9; data[67,2]=16000;
data[67,3]=0; data[68,1]=134.9; data[68,2]=16200; data[68,3]=0; data[69,1]=134.9;
data[69,2]=17900; data[69,3]=0; data[70,1]=134.9; data[70,2]=18500; data[70,3]=0;
data[71,1]=134.9; data[71,2]=19800; data[71,3]=0; data[72,1]=134.9; data[72,2]=20800;
data[72,3]=0; data[73,1]=134.9; data[73,2]=21000; data[73,3]=0; data[74,1]=134.9;
data[74,2]=21800; data[74,3]=0; data[75,1]=134.9; data[75,2]=22100; data[75,3]=0;
data[76,1]=134.9; data[76,2]=22400; data[76,3]=0; data[77,1]=134.9; data[77,2]=22400;
data[77,3]=0; data[78,1]=134.9; data[78,2]=25700; data[78,3]=0; data[79,1]=134.9;
data[79,2]=25800; data[79,3]=0; data[80,1]=134.9; data[80,2]=27800; data[80,3]=0;
data[81,1]=105.4; data[81,2]=12800; data[81,3]=0; data[82,1]=105.4; data[82,2]=15600;
data[82,3]=0; data[83,1]=105.4; data[83,2]=17400; data[83,3]=0; data[84,1]=105.4;
data[84,2]=19000; data[84,3]=0; data[85,1]=105.4; data[85,2]=19000; data[85,3]=0;
data[86,1]=105.4; data[86,2]=19700; data[86,3]=0; data[87,1]=105.4; data[87,2]=20000;
data[87,3]=0; data[88,1]=105.4; data[88,2]=21000; data[88,3]=0; data[89,1]=105.4;
data[89,2]=21300; data[89,3]=0; data[90,1]=105.4; data[90,2]=24400; data[90,3]=0;
data[91,1]=105.4; data[91,2]=25100; data[91,3]=0; data[92,1]=105.4; data[92,2]=25400;
data[92,3]=0; data[93,1]=105.4; data[93,2]=26700; data[93,3]=0; data[94,1]=105.4;
data[94,2]=26800; data[94,3]=0; data[95,1]=105.4; data[95,2]=26900; data[95,3]=0;
data[96,1]=105.4; data[96,2]=28300; data[96,3]=0; data[97,1]=105.4; data[97,2]=28500;
data[97,3]=0; data[98,1]=105.4; data[98,2]=29500; data[98,3]=0; data[99,1]=105.4;
data[99,2]=30900; data[99,3]=0; data[100,1]=105.4; data[100,2]=38200; data[100,3]=0;
data[101,1]=83.4; data[101,2]=18200; data[101,3]=0; data[102,1]=83.4; data[102,2]=25000;
data[102,3]=0; data[103,1]=83.4; data[103,2]=25700; data[103,3]=0; data[104,1]=83.4;
data[104,2]=28600; data[104,3]=0; data[105,1]=83.4; data[105,2]=29000; data[105,3]=0;
data[106,1]=83.4; data[106,2]=33700; data[106,3]=0; data[107,1]=83.4; data[107,2]=35000;
data[107,3]=0; data[108,1]=83.4; data[108,2]=36400; data[108,3]=0; data[109,1]=83.4;
data[109,2]=39900; data[109,3]=0; data[110,1]=83.4; data[110,2]=40000; data[110,3]=0;
data[111,1]=83.4; data[111,2]=40700; data[111,3]=0; data[112,1]=83.4; data[112,2]=44000;
data[112,3]=0; data[113,1]=83.4; data[113,2]=45100; data[113,3]=0; data[114,1]=83.4;
data[114,2]=46000; data[114,3]=0; data[115,1]=83.4; data[115,2]=46100; data[115,3]=0;
data[116,1]=83.4; data[116,2]=46800; data[116,3]=0; data[117,1]=83.4; data[117,2]=48700;
data[117,3]=0; data[118,1]=83.4; data[118,2]=50000; data[118,3]=0; data[119,1]=83.4;
data[119,2]=54300; data[119,3]=0; data[120,1]=83.4; data[120,2]=55600; data[120,3]=0;
data[121,1]=73.6; data[121,2]=12000; data[121,3]=0; data[122,1]=73.6; data[122,2]=40000;
data[122,3]=0; data[123,1]=73.6; data[123,2]=45000; data[123,3]=0; data[124,1]=73.6;
data[124,2]=48000; data[124,3]=0; data[125,1]=73.6; data[125,2]=62000; data[125,3]=0;
data[126,1]=73.6; data[126,2]=65000; data[126,3]=0; data[127,1]=73.6; data[127,2]=65000;
data[127,3]=0; data[128,1]=73.6; data[128,2]=67000; data[128,3]=0; data[129,1]=73.6;
data[129,2]=70000; data[129,3]=0; data[130,1]=73.6; data[130,2]=80000; data[130,3]=0;
data[131,1]=73.6; data[131,2]=81000; data[131,3]=0; data[132,1]=73.6; data[132,2]=83000;
data[132,3]=0; data[133,1]=73.6; data[133,2]=88000; data[133,3]=0; data[134,1]=73.6;
data[134,2]=91000; data[134,3]=0; data[135,1]=73.6; data[135,2]=92000; data[135,3]=0;
data[136,1]=73.6; data[136,2]=94000; data[136,3]=0; data[137,1]=73.6; data[137,2]=95000;
data[137,3]=0; data[138,1]=73.6; data[138,2]=104000; data[138,3]=0; data[139,1]=73.6;
data[139,2]=108000; data[139,3]=0; data[140,1]=73.6; data[140,2]=112000; data[140,3]=0;
data[141,1]=56.4; data[141,2]=114000; data[141,3]=0; data[142,1]=56.4; data[142,2]=130000;
data[142,3]=0; data[143,1]=56.4; data[143,2]=157000; data[143,3]=0; data[144,1]=56.4;
data[144,2]=157000; data[144,3]=0; data[145,1]=56.4; data[145,2]=159000; data[145,3]=0;
data[146,1]=56.4; data[146,2]=170000; data[146,3]=0; data[147,1]=56.4; data[147,2]=180000;
data[147,3]=0; data[148,1]=56.4; data[148,2]=201000; data[148,3]=0; data[149,1]=56.4;
data[149,2]=205000; data[149,3]=0; data[150,1]=56.4; data[150,2]=210000; data[150,3]=0;
data[151,1]=56.4; data[151,2]=230000; data[151,3]=0; data[152,1]=56.4; data[152,2]=244000;
data[152,3]=0; data[153,1]=56.4; data[153,2]=250000; data[153,3]=0; data[154,1]=56.4;
data[154,2]=251000; data[154,3]=0; data[155,1]=56.4; data[155,2]=257000; data[155,3]=0;
data[156,1]=56.4; data[156,2]=266000; data[156,3]=0; data[157,1]=56.4; data[157,2]=273000;
data[157,3]=0; data[158,1]=56.4; data[158,2]=287000; data[158,3]=0; data[159,1]=56.4;
data[159,2]=296000; data[159,3]=0; data[160,1]=56.4; data[160,2]=309000; data[160,3]=0;
data[161,1]=54; data[161,2]=285000; data[161,3]=0; data[162,1]=54; data[162,2]=308000;
data[162,3]=0; data[163,1]=54; data[163,2]=336000; data[163,3]=0; data[164,1]=54;
data[164,2]=377000; data[164,3]=0; data[165,1]=54; data[165,2]=380000; data[165,3]=0;
data[166,1]=54; data[166,2]=396000; data[166,3]=0; data[167,1]=54; data[167,2]=427000;
data[167,3]=0; data[168,1]=54; data[168,2]=497000; data[168,3]=0; data[169,1]=54;
data[169,2]=510000; data[169,3]=0; data[170,1]=54; data[170,2]=551000; data[170,3]=0;
data[171,1]=54; data[171,2]=560000; data[171,3]=0; data[172,1]=54; data[172,2]=595000;
data[172,3]=0; data[173,1]=54; data[173,2]=617000; data[173,3]=0; data[174,1]=54;
data[174,2]=660000; data[174,3]=0; data[175,1]=54; data[175,2]=668000; data[175,3]=0;
data[176,1]=54; data[176,2]=685000; data[176,3]=0; data[177,1]=54; data[177,2]=714000;
data[177,3]=0; data[178,1]=54; data[178,2]=733000; data[178,3]=0; data[179,1]=54;
data[179,2]=849000; data[179,3]=0; data[180,1]=54; data[180,2]=895000; data[180,3]=0;
data[181,1]=51.5; data[181,2]=820000; data[181,3]=0; data[182,1]=51.5; data[182,2]=839000;
data[182,3]=0; data[183,1]=51.5; data[183,2]=938000; data[183,3]=0; data[184,1]=51.5;
data[184,2]=1024000; data[184,3]=0; data[185,1]=51.5; data[185,2]=1040000; data[185,3]=0;
data[186,1]=51.5; data[186,2]=1048000; data[186,3]=0; data[187,1]=51.5; data[187,2]=1100000;
data[187,3]=0; data[188,1]=51.5; data[188,2]=1103000; data[188,3]=0; data[189,1]=51.5;
data[189,2]=1136000; data[189,3]=0; data[190,1]=51.5; data[190,2]=1145000; data[190,3]=0;
data[191,1]=51.5; data[191,2]=1147000; data[191,3]=0; data[192,1]=51.5; data[192,2]=1150000;
data[192,3]=0; data[193,1]=51.5; data[193,2]=1151000; data[193,3]=0; data[194,1]=51.5;
data[194,2]=1163000; data[194,3]=0; data[195,1]=51.5; data[195,2]=1200000; data[195,3]=0;
data[196,1]=51.5; data[196,2]=1210000; data[196,3]=0; data[197,1]=51.5; data[197,2]=1319000;
data[197,3]=0; data[198,1]=51.5; data[198,2]=1320000; data[198,3]=0; data[199,1]=51.5;
data[199,2]=1321000; data[199,3]=0; data[200,1]=51.5; data[200,2]=1630000; data[200,3]=0;
return(data)
}
a=load.data()
a
